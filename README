Some basic scripts are gather here.

a) the restart test: "2+2=4"

script: tst_2+2
- to use in a run dir. after a successful "testreport"
- input argument: '0','1','2','3','4' or 'All':
  proceed step by step or all steps at once
- tst_2+2 (no argument) -> print "usage"
- know problems: specific restart procedure (with fizhi pkg or offline pkg)
  not yet implemented

script: do_test_2+2
- call restart test "tst_2+2" multiple times, in every test experiment.
- needs to be in MITgcm/verification (with a copy of tst_2+2i script)
  and can only be used after a successful "testreport"
- do_test_2+2 -help -> print "usage"

NOTE: scripts "tst_2+2" & "do_test_2+2" have been moved (Dec 25, 2007)
 to: MITgcm/tools/

script: tst_2+2_cpl
 = version of tst_2+2 adapted for coupled set-up (e.g., verification/cpl_aim+ocn)

b) PBS-batch script that re-submit itself (loop).
script: runScript

- used (and tested) on myrinet-3 cluster.
- suffer from a lack of meaningful comments.
- not specially design to be general and obviously
  need to be modified/customized for each set-up.

c) A short script to split the ASCII Diagnostics-Stats output file
   into separated files (one per field) that are easy to read/load
   (e.g., in matlab, just use "load" command)
script: extract_StD
 no known dependency
+  A matlab script to load in 1 array all the separated files:
matlab-script: read_StD.m
 no known dependency
+  2 example scripts to make simple plots from Stat-Diags output:
matlab-script: grph_StD.m (uses read_StD.m)
matlab-script: plot_StD.m (uses read_StD.m, c_levs.m)

d) script: rn_pickup
- Rename 'pickup*.ckpt[A,B].*' files to 'pickup*.[10-digits-iter].*'
  with several selection options.
- rn_pickup (no argument) -> print "usage"

e) script: mk_mkfile
- run genmake2 with the same options as when "Makefile" was generated
 (needs an existing previous "Makefile") ; this replaces "make makefile".
 in addition, link *_mpi files from the MODS directory when -mpi was
 used to generate the previous Makefile.

f) script: derive_other_types
  from 1 src file, derive other type (R4,RS,RL,RS) version. For now, can
  only be applied to the 4 src files: "mdsio_pass_r{4,8}tor{l,s}.F"

g) script: mk_options_list
  generate list of CPP Options used in Fortran source files

h) script: comp_res
  to compare MONITOR output from 2 STDOUT files (outside of testreport).
  Note: use executable "cmpnum" compiled from tiny fortran code: cmpnum.f

i) script: mod
  to perform automatic substitution (useful to maintain src code) using
  command "sed" and set of rules from file (default rule file: "mod.sed")

----------------------------------------------------------------------
shell & matlab scripts to process MONITOR output from STDOUT files
 and make simple time-serie plots:
--------------------
a) shell script: select_MON
 get all MONITOR output from a single file and split into many
 single-variable output files (easier to load and plot)

b) shell scripts: do_extract_MON & extract_MON
 collect into a single file all MONITOR output from consecutive
 STDOUT output files (from a single experiment with one of more restart)

c) matlab script: grph_MON.m
 plot MONITOR time-serie of one or more experiment (with lines of different
 color). Note: experiment with larger number of records needs to come first.
Uses: read_MON.m
 to load-in single-variable output files (--> many files per experiment)
and/or: readnc_MON.m
 to load-in netcdf (MNC) MONITOR output files
